{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Kotlin",
  "type": "Maven and IDE plugins versions are different",
  "severity": "High",
  "comment": "Kotlin version that is used for building with Maven (1.6.10) differs from the one bundled into the IDE plugin (1.5.10)",
  "detailsInfo": "Reports the Maven plugin version of the Kotlin compiler that is different from the one that is used in the IDE plugin.\n\nThis inconsistency may lead to different error reporting behavior in the IDE and the compiler",
  "sources": [
    {
      "type": "file",
      "path": "pom.xml",
      "language": "XML",
      "line": 139,
      "offset": 26,
      "length": 17,
      "code": {
        "startLine": 137,
        "length": 17,
        "offset": 142,
        "surroundingCode": "                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <version>${kotlin.version}</version>\n                <executions>\n                    <execution>"
      }
    }
  ],
  "attributes": {
    "module": "gameoflife",
    "inspectionName": "DifferentKotlinMavenVersion"
  },
  "hash": "a91876d74d5695d2d800ed7c1fbc7a876db60ebc9a05c06d04409d3b8e4a0a54"
},{
  "tool": "Code Inspection",
  "category": "Java interop issues",
  "type": "Function or property has platform type",
  "severity": "Moderate",
  "comment": "Declaration has type inferred from a platform call, which can lead to unchecked nullability issues. Specify type explicitly as nullable or non-nullable.",
  "detailsInfo": "Reports functions and properties that have a platform type.\n\nTo prevent unexpected errors, the type should be declared explicitly.\n\n**Example:**\n\n\n      fun foo() = java.lang.String.valueOf(1)\n\nThe quick fix allows you to specify the return type:\n\n\n      fun foo(): String = java.lang.String.valueOf(1)\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/net/redstonecraft/opengl/camera/Camera.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 18,
      "length": 16,
      "code": {
        "startLine": 13,
        "length": 16,
        "offset": 121,
        "surroundingCode": "class PerspectiveCamera(val fov: Float, val aspect: Float, val near: Float, val far: Float) : Camera {\n\n    override val projectionMatrix = Matrix4f().perspective(fov, aspect, near, far)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "gameoflife",
    "inspectionName": "HasPlatformType"
  },
  "hash": "e0676ac625a0ac2b11aa67d1971963879906354780077c3925b784ab1f77bb1a"
}]}